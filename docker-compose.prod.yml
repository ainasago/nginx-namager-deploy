version: '3.8'

services:
  nginx-manager:
    build:
      context: .
      dockerfile: Dockerfile
      target: final
    container_name: nginx-manager-prod
    restart: always
    command: ["dotnet", "NginxManager.dll", "--urls", "http://+:5000;https://+:5001"]

    ports:
      - "${HTTP_PORT:-5000}:5000"
      - "${HTTPS_PORT:-5001}:5001"
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"

    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:5000;https://+:5001
      - DOTNET_RUNNING_IN_CONTAINER=true
      - DOTNET_CLI_TELEMETRY_OPTOUT=1

      # 数据库配置
      - ConnectionStrings__Default=Data Source=/app/data/nginxmanager.db

      # 应用配置
      - NginxManager__DefaultDataDir=/app/data
      - NginxManager__DefaultNginxDir=/app/nginx-instances
      - NginxManager__DefaultSslDir=/app/ssl
      - NginxManager__DefaultLogDir=/app/logs
      - NginxManager__DefaultWebRootDir=/var/www/html

      # Kestrel配置
      - Kestrel__Limits__MaxConcurrentConnections=100
      - Kestrel__Limits__MaxConcurrentUpgradedConnections=100

    volumes:
      - ${DATA_DIR:-./data}:/app/data:rw
      - ${NGINX_INSTANCES_DIR:-./nginx-instances}:/app/nginx-instances:rw
      - ${SSL_DIR:-./ssl}:/app/ssl:rw
      - ${LOGS_DIR:-./logs}:/app/logs:rw
      - ${WWW_DIR:-./www}:/var/www/html:rw
      - ${TEMP_DIR:-./temp}:/tmp:rw

    networks:
      - nginx-network

    healthcheck:
      test: ["CMD", "curl", "-f", "--max-time", "5", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M

    security_opt:
      - no-new-privileges:true

    read_only: false

    tmpfs:
      - /tmp:noexec,nosuid,size=100m

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis缓存（可选，用于会话存储和缓存）
  redis:
    image: redis:7-alpine
    container_name: nginx-manager-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme123}
    volumes:
      - redis-data:/data
    networks:
      - nginx-network
    profiles:
      - with-redis

  # PostgreSQL数据库（可选，替代SQLite）
  postgres:
    image: postgres:15-alpine
    container_name: nginx-manager-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: nginxmanager
      POSTGRES_USER: ${POSTGRES_USER:-nginxmgr}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme123}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - nginx-network
    profiles:
      - with-postgres

  # Nginx反向代理（可选，用于生产环境）
  nginx-proxy:
    image: nginx:1.24-alpine
    container_name: nginx-manager-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/nginx.conf:ro
      - ${SSL_DIR:-./ssl}:/etc/nginx/ssl:ro
      - ${WWW_DIR:-./www}:/var/www/html:ro
    depends_on:
      - nginx-manager
    networks:
      - nginx-network
    profiles:
      - with-proxy

networks:
  nginx-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  nginx-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${DATA_DIR:-./data}
  nginx-instances-vol:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${NGINX_INSTANCES_DIR:-./nginx-instances}
  nginx-ssl-vol:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${SSL_DIR:-./ssl}
  nginx-logs-vol:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${LOGS_DIR:-./logs}
